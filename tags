!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
EVBUFFER_DATA	k_event.h	165;"	d
EVBUFFER_EOF	k_event.h	126;"	d
EVBUFFER_ERROR	k_event.h	127;"	d
EVBUFFER_INPUT	k_event.h	166;"	d
EVBUFFER_LENGTH	k_event.h	164;"	d
EVBUFFER_MAX_READ	k_buffer.cpp	13;"	d	file:
EVBUFFER_OUTPUT	k_event.h	167;"	d
EVBUFFER_READ	k_event.h	124;"	d
EVBUFFER_TIMEOUT	k_event.h	128;"	d
EVBUFFER_WRITE	k_event.h	125;"	d
EVENT_FD	k_event.h	63;"	d
EVENT_SIGNAL	k_event.h	62;"	d
EVLIST_ACTIVE	k_event.h	21;"	d
EVLIST_ALL	k_event.h	25;"	d
EVLIST_INIT	k_event.h	23;"	d
EVLIST_INSERTED	k_event.h	19;"	d
EVLIST_INTERNAL	k_event.h	22;"	d
EVLIST_SIGNAL	k_event.h	20;"	d
EVLIST_TIMEOUT	k_event.h	18;"	d
EVLOOP_NONBLOCK	k_event.h	89;"	d
EVLOOP_ONCE	k_event.h	88;"	d
EVUTIL_CLOSESOCKET	k_evutil.h	43;"	d
EV_PERSIST	k_event.h	32;"	d
EV_READ	k_event.h	29;"	d
EV_SIGNAL	k_event.h	31;"	d
EV_TIMEOUT	k_event.h	28;"	d
EV_WRITE	k_event.h	30;"	d
FD_CLOSEONEXEC	k_epoll.cpp	45;"	d	file:
INITIAL_NEVENTS	k_epoll.cpp	53;"	d	file:
INITIAL_NFILES	k_epoll.cpp	52;"	d	file:
MAX_EPOLL_TIMEOUT_MSEC	k_epoll.cpp	50;"	d	file:
MAX_NEVENTS	k_epoll.cpp	54;"	d	file:
SIZE_MAX	k_buffer.cpp	12;"	d	file:
SWAP	k_buffer.cpp	14;"	d	file:
TAILQ_EMPTY	k_event-internal.h	47;"	d
TAILQ_END	k_event-internal.h	45;"	d
TAILQ_ENTRY	k_queue.h	19;"	d
TAILQ_FIRST	k_event-internal.h	44;"	d
TAILQ_HEAD	k_queue.h	12;"	d
TAILQ_INIT	k_queue.h	26;"	d
TAILQ_INSERT_TAIL	k_queue.h	31;"	d
TAILQ_NEXT	k_event-internal.h	46;"	d
TAILQ_REMOVE	k_queue.h	38;"	d
_INIT_MIN_HEAP_SIZE	k_min_heap.h	/^enum _INIT_MIN_HEAP_SIZE { _init_min_heap_size = 8 };$/;"	g
_K_EVENTINTERNAL_H_	k_event-internal.h	10;"	d
_K_EVENT_H_	k_event.h	9;"	d
_K_EVUTIL_H_	k_evutil.h	10;"	d
_K_MIN_HEAP_H_	k_min_heap.h	10;"	d
_K_QUEUE_H_	k_queue.h	10;"	d
_init_min_heap_size	k_min_heap.h	/^enum _INIT_MIN_HEAP_SIZE { _init_min_heap_size = 8 };$/;"	e	enum:_INIT_MIN_HEAP_SIZE
avtivequeues	k_event-internal.h	/^    struct event_list **avtivequeues;$/;"	m	struct:event_base	typeref:struct:event_base::event_list
buffer	k_event.h	/^    unsigned char *buffer;$/;"	m	struct:evbuffer
bufferevent	k_event.h	/^struct bufferevent$/;"	s
capacity	k_min_heap.h	/^    unsigned int capacity;$/;"	m	class:min_heap
cb	k_event.h	/^    void (*cb)(struct evbuffer *, size_t, size_t, void *);$/;"	m	struct:evbuffer
cbarg	k_event.h	/^    void *cbarg;$/;"	m	struct:bufferevent
cbargs	k_event.h	/^    void *cbargs;$/;"	m	struct:evbuffer
ecutil_timercmp	k_evutil.h	36;"	d
enabled	k_event.h	/^    short enabled;  \/\/当前已经启用的事件$/;"	m	struct:bufferevent
epoll_init	k_epoll.cpp	/^epollop::epoll_init(struct event_base* base)$/;"	f	class:epollop
epollfd	k_epoll.cpp	/^    int epollfd;$/;"	m	class:epollop	file:
epollop	k_epoll.cpp	/^class epollop :$/;"	c	file:
epollop	k_epoll.cpp	/^epollop::epollop()$/;"	f	class:epollop
errorcb	k_event.h	/^    everrorcb  errorcb;$/;"	m	struct:bufferevent
ev_active_next	k_event.h	/^    TAILQ_ENTRY (event) ev_active_next;$/;"	m	struct:event
ev_base	k_event.h	/^    event_base *ev_base;$/;"	m	struct:event
ev_base	k_event.h	/^    struct event_base *ev_base;$/;"	m	struct:bufferevent	typeref:struct:bufferevent::event_base
ev_callback	k_event.h	/^    void (*ev_callback)(int, short, void* arg); \/\/分别为对应的描述符 监听的事件 参数$/;"	m	struct:event
ev_events	k_event.h	/^    short ev_events;    \/\/事件类型$/;"	m	struct:event
ev_flags	k_event.h	/^    int ev_flags;       \/\/当前event的状态$/;"	m	struct:event
ev_ncalls	k_event.h	/^    short ev_ncalls;    \/\/事件就绪时ev_callback被执行的次数$/;"	m	struct:event
ev_next	k_event.h	/^    TAILQ_ENTRY (event) ev_next;$/;"	m	struct:event
ev_pncalls	k_event.h	/^    short *ev_pncalls; $/;"	m	struct:event
ev_pri	k_event.h	/^    int ev_pri;     $/;"	m	struct:event
ev_read	k_event.h	/^    struct event ev_read;$/;"	m	struct:bufferevent	typeref:struct:bufferevent::event
ev_res	k_event.h	/^    int ev_res;         \/\/返回的事件状态$/;"	m	struct:event
ev_signal_next	k_event.h	/^    TAILQ_ENTRY (event) ev_signal_next;$/;"	m	struct:event
ev_timeout	k_event.h	/^    struct timeval ev_timeout;$/;"	m	struct:event	typeref:struct:event::timeval
ev_write	k_event.h	/^    struct event ev_write;$/;"	m	struct:bufferevent	typeref:struct:bufferevent::event
evbase	k_event-internal.h	/^    void *evbase;$/;"	m	struct:event_base
evbuffer	k_event.h	/^struct evbuffer$/;"	s
evbuffercb	k_event.h	/^typedef void (*evbuffercb)(struct bufferevent *, void *);$/;"	t
event	k_event.h	/^struct event$/;"	s
event_base	k_event-internal.h	/^struct event_base$/;"	s
event_break	k_event-internal.h	/^    int event_break;$/;"	m	struct:event_base
event_count	k_event-internal.h	/^    int event_count; $/;"	m	struct:event_base
event_count_active	k_event-internal.h	/^    int event_count_active;$/;"	m	struct:event_base
event_fd	k_event.h	/^    int event_fd;  \/\/文件描述符或信号$/;"	m	struct:event
event_gotterm	k_event-internal.h	/^    int event_gotterm;$/;"	m	struct:event_base
event_tv	k_event-internal.h	/^    struct timeval  event_tv;           \/\/dispatch返回的时间  即IO就绪的时间$/;"	m	struct:event_base	typeref:struct:event_base::timeval
event_watermark	k_event.h	/^struct event_watermark$/;"	s
eventop	k_event-internal.h	/^class eventop$/;"	c
eventqueue	k_event-internal.h	/^    struct event_list eventqueue;       \/\/事件队列 双向链表$/;"	m	struct:event_base	typeref:struct:event_base::event_list
events	k_epoll.cpp	/^    struct epoll_event *events;$/;"	m	class:epollop	typeref:struct:epollop::epoll_event	file:
evepoll	k_epoll.cpp	/^struct evepoll$/;"	s	file:
everite	k_epoll.cpp	/^    struct event *everite;$/;"	m	struct:evepoll	typeref:struct:evepoll::event	file:
everrorcb	k_event.h	/^typedef void (*everrorcb)(struct bufferevent *, short what, void *);$/;"	t
evread	k_epoll.cpp	/^    struct event *evread;$/;"	m	struct:evepoll	typeref:struct:evepoll::event	file:
evsel	k_event-internal.h	/^    const eventop *evsel;       \/\/父类指针$/;"	m	struct:event_base
evtimer_add	k_event.h	93;"	d
evtimer_del	k_event.h	98;"	d
evtimer_pending	k_event.h	106;"	d
evtimer_set	k_event.h	81;"	d
evutil_timeradd	k_evutil.h	16;"	d
evutil_timerclear	k_evutil.h	41;"	d
evutil_timersub	k_evutil.h	26;"	d
fds	k_epoll.cpp	/^    struct evepoll *fds;$/;"	m	class:epollop	typeref:struct:epollop::evepoll	file:
high	k_event.h	/^    size_t high;$/;"	m	struct:event_watermark
input	k_event.h	/^    struct evbuffer *input;$/;"	m	struct:bufferevent	typeref:struct:bufferevent::evbuffer
low	k_event.h	/^    size_t low;$/;"	m	struct:event_watermark
min_heap	k_min_heap.h	/^class min_heap$/;"	c
min_heap	k_min_heap.h	/^min_heap::min_heap()$/;"	f	class:min_heap
min_heap_elem_init	k_min_heap.h	/^min_heap::min_heap_elem_init(event *e)$/;"	f	class:min_heap
min_heap_idx	k_event.h	/^    unsigned int min_heap_idx;$/;"	m	struct:event
min_heap_reverve	k_min_heap.h	/^min_heap::min_heap_reverve(unsigned new_capacity)$/;"	f	class:min_heap
misalign	k_event.h	/^    size_t misalign;    \/\/已经使用的长度$/;"	m	struct:evbuffer
nactivequeues	k_event-internal.h	/^    int nactivequeues;$/;"	m	struct:event_base
need_reinit	k_event-internal.h	/^    int need_reinit;$/;"	m	class:eventop
nevents	k_epoll.cpp	/^    int nevents;$/;"	m	class:epollop	file:
nfds	k_epoll.cpp	/^    int nfds;$/;"	m	class:epollop	file:
off	k_event.h	/^    size_t off;         \/\/未被使用的长度$/;"	m	struct:evbuffer
orig_buffer	k_event.h	/^    unsigned char *orig_buffer;$/;"	m	struct:evbuffer
output	k_event.h	/^    struct evbuffer *output;$/;"	m	struct:bufferevent	typeref:struct:bufferevent::evbuffer
readcb	k_event.h	/^    evbuffercb readcb;$/;"	m	struct:bufferevent
sig	k_event-internal.h	/^    struct evsignal_info sig;$/;"	m	struct:event_base	typeref:struct:event_base::evsignal_info
signal_add	k_event.h	94;"	d
signal_del	k_event.h	99;"	d
signal_pending	k_event.h	107;"	d
signal_set	k_event.h	82;"	d
timeheap	k_event-internal.h	/^    min_heap timeheap;           \/\/管理定时事件的小跟堆$/;"	m	struct:event_base
timeout_add	k_event.h	95;"	d
timeout_del	k_event.h	100;"	d
timeout_event	k_min_heap.h	/^    struct event** timeout_event;$/;"	m	class:min_heap	typeref:struct:min_heap::event
timeout_pending	k_event.h	108;"	d
timeout_read	k_event.h	/^    int timeout_read;$/;"	m	struct:bufferevent
timeout_set	k_event.h	83;"	d
timeout_write	k_event.h	/^    int timeout_write;$/;"	m	struct:bufferevent
totallen	k_event.h	/^    size_t totallen;    \/\/$/;"	m	struct:evbuffer
used_size	k_min_heap.h	/^    unsigned int used_size; $/;"	m	class:min_heap
wm_read	k_event.h	/^    struct event_watermark wm_read;$/;"	m	struct:bufferevent	typeref:struct:bufferevent::event_watermark
wm_write	k_event.h	/^    struct event_watermark wm_write;$/;"	m	struct:bufferevent	typeref:struct:bufferevent::event_watermark
writecb	k_event.h	/^    evbuffercb writecb;$/;"	m	struct:bufferevent
~epollop	k_epoll.cpp	/^epollop::~epollop()$/;"	f	class:epollop
